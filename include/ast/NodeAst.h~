#ifndef INCLUDE_NODEAST_H
#define INCLUDE_NODEAST_H

#include <list>
#include <string>

using namespace std;

class NodeAst {
	public:
		enum NodeType {
			T_CTERMINATE_INT_CONST, T_CTERMINATE_CHAR_CONST, T_CTERMINATE_FLOAT_CONST, 

			T_CTERMINATE_ID, T_CTERMINATE_STR,

		   	T_CTERMINATE_PTR_OP, T_CTERMINATE_INC_OP, T_CTERMINATE_DEC_OP, T_CTERMINATE_NEW_OP, T_CTERMINATE_DELETE_OP, T_CTERMINATE_UAND_OP, T_CTERMINATE_UREF_OP, T_CTERMINATE_UPOSITIVE_OP, T_CTERMINATE_UNEGATIVE_OP, T_CTERMINATE_COMPLETEMENT_OP, T_CTERMINATE_NOT_OP, T_CTERMINATE_ASSIGN_OP, T_CTERMINATE_MUL_OP, T_CTERMINATE_DIV_OP, T_CTERMINATE_MOD_OP, T_CTERMINATE_ADD_OP, T_CTERMINATE_SUB_OP, T_CTERMINATE_LEFT_OP, T_CTERMINATE_RIGHT_OP, T_CTERMINATE_AND_OP, T_CTERMINATE_XOR_OP, T_CTERMINATE_OR_OP,

			T_CTERMINATE_CONST, T_CTERMINATE_VOLATILE, T_CTERMINATE_VIRTUAL,

			T_CTERMINATE_TYPEDEF, T_CTERMINATE_EXTERN, T_CTERMINATE_STATIC, T_CTERMINATE_AUTO, T_CTERMINATE_REGISITER,

			T_CTERMINATE_VOID, T_CTERMINATE_CHAR, T_CTERMINATE_SHORT, T_CTERMINATE_INT, T_CTERMINATE_LONG, T_CTERMINATE_FLOAT, T_CTERMINATE_DOUBLE, T_CTERMINATE_SIGNED, T_CTERMINATE_UNSIGNED, 

			T_CARGEXPLIST_ASSGEXP, T_CARGEXPLIST_ARGEXPLIST_ASSGEXP,

			T_CPRIMEXP_ID, T_CPRIMEXP_CONST, T_CPRIMEXP_STR, T_CPRIMEXP_EXP,

			T_CPOSTEXP_PRIMEXP, T_CPOSTEXP_POSTEXP_ARRAY_EXP, T_CPOSTEXP_POSTEXP_CALL_VOID, T_CPOSTEXP_POSTEXP_CALL_ARGEXPLIST, T_CPOSTEXP_POSTEXP_REF_ID, T_CPOSTEXP_POSTEXP_PTR_ID, T_CPOSTEXP_POSTEXP_INC, T_CPOSTEXP_POSTEXP_DEC, T_CPOSTEXP_NEW_ID_VOID, T_CPOSTEXP_DELETE_ID,

			T_CUNARYEXP_POSTEXP, T_CUNARYEXP_INC_UNARAYEXP, T_CUNARYEXP_DEC_UNARYEXP, T_CUNARYEXP_UNARYOP_CASTEXP, T_CUNARYEXP_SIZEOF_UNARAYEXP,

			T_CCASTEXP_UNARYEXP, T_CCASTEXP_TYPENAME_CASTEXP,

			T_CMULEXP_CASTEXP, T_CMULEXP_MULEXP_MUL_CASTEXP, T_CMULEXP_MULEXP_DIV_CASTEXP, T_CMULEXP_MULEXP_MOD_CASTEXP,

			T_CADDEXP_MULEXP, T_CADDEXP_ADDEXP_ADD_MULEXP, T_CADDEXP_ADDEXP_SUB_MULEXP,

			T_CRELEXP_ADDEXP, T_CRELEXP_RELEXP_L_ADDEXP, T_CRELEXP_G_ADDEXP, T_CRELEXP_LE_ADDEXP, T_RELEXP_GE_ADDEXP,

			T_CEQUALEXP_RELEXP, T_CEQUALEXP_EQUALEXP_EQ_RELEXP, T_CEQUALEXP_EQUALEXP_NE_RELEXP,

			T_CLOGANDEXP_EQUALEXP, T_CLOGANDEXP_LOGANDEXP_AND_EQUALEXP,

			T_CLOGOREXP_LOGANDEXP, T_CLOGOREXP_LOGOREXP_OR_LOGANDEXP,

			T_CCONSTEXP_CONDITIONALEXP,

			T_CCONDITIONALEXP_LOGOREXP,

			T_CASSIGNEXP_CONSITIONALEXP, T_CASSIGNEXP_UNARYEXP_ASSIGN_OP_ASSIGNEXP,

			T_CEXP_ASSIGNEXP, T_CEXP_EXP_ASSIGNEXP,

			T_CJUMPSTM_GOTO_ID, T_CJUMPSTM_CONTINUE, T_CJUMPSTM_BREAK, T_CJUMPSTM_RETURN, T_CJUMPSTM_RETURN_EXP,

			T_CITRSTM_WHILE_EXP_STM, T_CITRSTM_DO_STM_WHILE_EXP, T_CITRSTM_FOR_EXPSTM_EXPSTM_EXP_STM,

			T_CSELSTM_IF_EXP_STM, T_CSELSTM_IF_EXP_STM_ELSE_STM, T_SWITCH_EXP_STM,

			T_CSTMLIST_STM, T_CSTMLIST_STMLIST_STM,

			T_CCOMPSTM_VOID, T_CCOMPSTM_STMLIST, T_CCOMPSTM_DECTION_LIST, T_CCOMPSTM_DECTIONLIST_STMLIST,

			T_CEXPSTM_VOID, T_CEXPSTM_EXP,

			T_CLABSTM_ID_STM, T_CLABSTM_CASE_CONSTSTM_STM, T_CLABSTM_DEFAULT_STM,

			T_CSTM_LABSTM, T_CSTM_COMPSTM, T_CSTM_EXPSTM, T_CSTM_SELSTM, T_CSTM_ITRSTM, T_CSTM_JUMPSTM,

			T_CDIRABSDECTOR_ABSDECTOR, T_CDIRABSDECTOR_ARRAY_VOID, T_CDIRABSDECTOR_ARRAY_CONSTEXP, T_CDIRABSDECTOR_DIRABSDECTOR_ARRAY_VOID, T_CDIRABSDECTOR_ARRAY_CONSTEXP, T_CDIRABSDECTOR_CALL_VOID, T_CDIRABSDECTOR_CALL_PARAMTYPELIST, T_CDIRABSDECTOR_DIRABSDECTOR_CALL_VOID, T_CDIRABSDECTOR_DIRABSDECTOR_CALL_PARAMTYPELIST,

			T_CABSDECTOR_POINTER, T_CABSDECTOR_DIRABSDECTOR, T_CABSDECTOR_DIRABSDECTOR,

			T_CTYPENAME_SQFLIST, T_CTYPENAME_SQLIST_ABSDECTOR,

			T_CINITZERLIST_INITZER, T_CINITZERLIST_INITZERLIST_INITZER,

			T_CINITZER_ASSIGNEXP, T_CINITZERLIST,

			T_CIDLIST_ID, T_CIDLIST_IDLIST_ID,

			T_CPARAMDECTION_DECTIONSFS_DECTOR, T_CPARAMDECTION_DECTIONSFS_ABSDECTOR, T_CPARAMDECTION_DECTIONSFS,

			T_CPARAMLIST_PARAMDECTION, T_CPARAMLIST_PARAMLIST_PARAMDECTION,

			T_CPARAMTYPELIST_PARAMLIST, T_CPARAMTYPELIST_PARAMLIST_ELLIPSIS,

			T_CTYPEQFLIST_TYPEQF, T_CTYPEQFLIST_TYPEQFLIST_TYPEQF,

			T_CPOINTER_REF, T_CPOINTER_REF_TYPEQFLIST, T_CPOINTER_REF_POINTER, T_CPOINTER_TYPEQFLIST_POINTER,

			T_CDIRDECTOR_ID, T_CDIRDECTOR_DECTOR, T_CDIRDECTOR_DIRDECTOR_ARRAY_CONSTEXP, T_CDIRDECTOR_DIRDECTOR_ARRAY_VOID, T_CDIRDECTOR_DIRDECTOR_CALL_PARAMTYPELIST, T_CDIRDECTOR_DIRDECTOR_CALL_IDLIST, T_CDIRDECTOR_DIRDECTOR_CALL_VOID,

			T_CDECTOR_POINTER_DIRDECTOR, T_CDECTOR_DIRDECTOR,

			T_CCLASSDECTOR_DECTOR,

			T_CCLASSDECTORLIST_CLASSDECTOR, T_CCLASSDECTORLIST_CLASSDECTORLIST_CLASSDECTOR,

			T_CCLASSDECTION_SQFLIST_CLASSDECTORLIST, T_CCLASSDECTION_FUNCDEF,

			T_CCLASSDECTIONLIST_CLASSDECTION, T_CCLASSDECTIONLIST_CLASSDECTIONLIST_CLASSDECTION,

			T_CCLASSSF_CLASS_ID_CLASSDECTIONLIST, T_CCLASSSF_CLASS_ID_IDLIST_CLASSDECTIONLIST, T_CCLASSSF_CLASS_ID,

			T_CSQFLIST_TYPESF_SQFLIST, T_CSQFLIST_TYPESF, T_CSQFLIST_TYPEQF_SQFLIST, T_CSQFLIST_TYPEQF,

			T_CINITDECTOR_DECTOR, T_CINIDECTOR_ASSGIN_INITZER,

			T_CINITDECTORLIST_INITDECTOR, T_CINITDECTORLIST_INITDECTORLIST_INITDECTOR,

			T_CDECTIONSF_STORCLASSSF, T_CDECTIONSF_STORCLASSSF_DECTIONSF, T_CDECTIONSF_TYPESF, T_CDECTIONSF_TYPESF_DECTIONSF, T_CDECTIONSF_TYPEQF, T_CDECTIONSF_TYPEQF_DECTIONSF,

			T_CDECTIONLIST_DECTION, T_CDECTIONLIST_DECTIONLIST_DECTION,

			T_CDECTION_DECTIONSFS, T_CDECTION_DECTIONSFS_INITDECTORLIST,

			T_CFUNCDEF_DECTIONSFS_DECTOR_COMPSTM, T_CFUNCDEF_DECTOR_COMPSTM,

			T_CEXTDECTION_FUNCDEF, T_CEXTDECTION_DECTION,

			T_CTRANSUNIT_EXTDECTION, T_CTRANSUNIT_TRANSUNIT_EXTDECTION,

			T_CPROGRAMSTART_TRANSUNIT,
			
			T_ERROR
		};

		int lineno;
		NodeType nodeType;
		list<NodeAst *> childs;
		string logimsg;
		        
	public:
		NodeAst(NodeAst nodeType_t);
		virtual void setLineno(int lineno_t);
		virtual int getLineno();
		virtual void setNodeType(NodeAst::NodeType nodeType_t);
		virtual NodeAst::NodeType getNodeType();
		virtual int addChild1(NodeAst *child1);
		virtual int addChild2(NodeAst *child1, NodeAst *child2);
		virtual int addChild3(NodeAst *child1, NodeAst *child2, NodeAst *child3);
		virtual int addChild4(NodeAst *child1, NodeAst *child2, NodeAst *child3, NodeAst *child4);
		virtual int addChild5(NodeAst *child1, NodeAst *child2, NodeAst *child3, NodeAst *child4, NodeAst *child5);
		
		virtual void attachLogimsg(string msg);
		
}




#endif
